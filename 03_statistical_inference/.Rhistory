library(tidyverse)
library(dslabs)
options(digits = 3)
library(tidyverse)
library(dslabs)
options(digits = 3)
data(death_prob)
head(death_prob)
p <- death_prob %>% filter(sex == "Female", age == 50) %>% pull(prob)
p
a <- -150000
b <- 1150
mu_female_50 <- a*p + b*(1-p)
mu_female_50
sigma_female_50 <- abs(a-b)*sqrt(p*(1-p))
sigma_female_50
n <- 1000
n*mu_female_50
sqrt(n) * sigma_female_50
pnorm(0, mean = n*mu_female_50, sd = sqrt(n)*sigma_female_50)
p <- death_prob %>% filter(sex == "Male", age == 50) %>% pull(prob)
p
b <- ((sum_mu/n)-(a*p)) / (p-1)
a <- -150000
n <- 1000
sum_mu <- 700000
b <- ((sum_mu/n)-(a*p)) / (p-1)
b
b <- ((sum_mu/n)-(a*p)) / (1-p)
b
sigma_male_50 <- abs(a-b)*sqrt(p*(1-p))
sqrt(n) * sigma_male_50
sigma_male_50 <- abs(a-b)*sqrt(p*(1-p))
sqrt(n) * sigma_male_50
pnorm(0, mean = sum_mu, sd = sqrt(n)*sigma_male_50)
p <- 0.015
a <- -150000
b <- 1150
mu_50 <- (a*p) + (b*(1-p))
mu_sum_50 <- n*mu_50
mu_sum_50
sigma_50 <- abs(b-a) * sqrt(p*(1-p))
se_50 <- sqrt(n) * sigma_50
se_50
pnorm(0, mean = mu_sum_50, sd = se_50)
-1e6
pnorm(-1e6)
pnorm(-1e6, mean = mu_sum_50, sd = se_50)
probs <- sapply(p, function(p){
probability <- pnorm(p, mean = mu_sum_50, sd = se_50)
if (probability > 0.9){
return(probability)
}
})
probs <- sapply(p, function(x){
probability <- pnorm(x, mean = mu_sum_50, sd = se_50)
if (probability > 0.9){
return(probability)
}
})
probs <- sapply(p, function(x){
probability <- pnorm(x, mean = mu_sum_50, sd = se_50)
if (probability > 0.9){
return(x)
}
})
p <- seq(.01, .03, .001)
a <- -150000    # loss per claim
b <- 1150    # premium - profit when no claim
n <- 1000
p_lose_money <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
pnorm(0, exp_val, se)
})
p_lose_money <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
loss_money <- pnorm(0, exp_val, se)
if (loss_money > 0.9){
return(p)
}
})
p_lose_money <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
pnorm(0, exp_val, se)
})
data.frame(p, p_lose_money) %>%
filter(p_lose_money > 0.9) %>%
pull(p) %>%
min()
p <- seq(.01, .03, .001)
a <- -150000    # loss per claim
b <- 1150    # premium - profit when no claim
n <- 1000
p_lose_money <- sapply(p, function(p){
exp_val <- n*(a*p + b*(1-p))
se <- sqrt(n) * abs(b-a) * sqrt(p*(1-p))
pnorm(-1e6, exp_val, se)
})
data.frame(p, p_lose_money) %>%
filter(p_lose_money > 0.9) %>%
pull(p) %>%
min()
set.seed(25, sample.kind = "Rounding")
p <- .015
loss <- -150000
profit <- 1150
n <- 1000
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes)/10^6
set.seed(27, sample.kind = "Rounding")
p <- .015
loss <- -150000
profit <- 1150
n <- 1000
B <- 10000
S <- replicate(B, {
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes) < -1e6
})
set.seed(27, sample.kind = "Rounding")
p <- .015
loss <- -150000
profit <- 1150
n <- 1000
B <- 10000
S <- replicate(B, {
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes)/1e6
})
mean(S < -1)
p <- .015
n <- 1000
l <- -150000
z <- qnorm(0.5)
# x <- -l\*((np - z\*sqrt(np(1-p)))/(n(1-p)+z\*sqrt(np(1-p))))
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))
x
p <- .015
n <- 1000
l <- -150000
z <- qnorm(.05)
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))
x
l*p + (x*(1-p))
n*(l*p + (x*(1-p)))
set.seed(28, sample.kind = "Rounding")
p <- .015
loss <- -150000
profit <- x
n <- 1000
B <- 10000
S <- replicate(B, {
outcomes <- sample(c(loss, profit), n, prob = c(p, 1-p), replace = TRUE)
sum(outcomes)
})
mean(S < 0)
set.seed(29, sample.kind="Rounding")
p <- .015
loss <- -150000
profit <- x
n <- 1000
B <- 10000
profit <- replicate(B, {
new_p <- p + sample(seq(-0.01, 0.01, length = 100), 1)
draws <- sample(c(x, l), n,
prob=c(1-new_p, new_p), replace = TRUE)
sum(draws)
})
mean(profit < 0)
mean(profit < -1e6)
setwd("~/GitHub/basic_stats/statistical_inference")
setwd("~/GitHub/basic_stats/statistical_inference")
