B <- 10^seq(1, 5, len = 100)    # defines vector of many B values
compute_prob <- function(B, n = 22){    # function to run Monte Carlo simulation with each B
same_day <- replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_day)
}
prob <- sapply(B, compute_prob)    # apply compute_prob to many values of B
df <- data.frame(prob = prob, B = B)
ggplot(df, aes(x = B, y = prob))+
geom_line()+
scale_x_log10()
n <- 6 # remaining games (7 - 1)
outcomes <- c(0,1)  # possible results where 0 indicates a loss and 1 indicates a win for the Cavs
l<-rep(list(outcomes),n) # list of all possible outcomes in all remaining games
possibilities<-expand.grid(l) # data frame containing all the combinations
results <- rowSums(possibilities) >= 4 # which combinations of game outcomes result in the Cavs winning 4 or more games
mean(results) # compute probability
B <- 10000
set.seed(1)
results <- replicate(B, {
x <- sample(c(0,1), 6, replace = TRUE)
sum(x) >= 4
})
mean(results)
p <- seq(0.5, 0.95, 0.025)
prob_win <- function(p){
B <- 10000
results <- replicate(B, {
b_win <- sample(c(1,0), 7, replace = T, prob = c(1-p, p))
sum(b_win) >= 4
})
mean(results)
}
Pr <- sapply(p, prob_win)
plot(p, Pr)
prob_win <- function(N, p=0.75){
B <- 10000
result <- replicate(B, {
b_win <- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p))
sum(b_win)>=(N+1)/2
})
mean(result)
}
N <- seq(1,25,2)
Pr <- sapply(N, prob_win)
plot(N, Pr)
p_ace_and_facecard <- (4/52) * (16/51)
p_facecard_and_ace <- (16/52) * (4/51)
p_one_or_other <- p_ace_and_facecard + p_facecard_and_ace - 0
p_one_or_other
# Monte Carlo simulation of stick strategy
B <- 10000
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)    # open door with no prize that isn't chosen
stick <- my_pick    # stick with original door
stick == prize_door    # test whether the original door has the prize
})
mean(stick)    # probability of choosing prize door when sticking
# Monte Carlo simulation of switch strategy
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen first
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
switch == prize_door    # test whether the switched door has the prize
})
mean(switch)    # probability of choosing prize door when switching
medals <- c("Gold", "Silver", "Bronze")
runners <- paste0("Runner",seq(1,8))
ways <- expand.grid(runner = runners, medal = medals)
ways <- paste(ways$runner, ways$medal)
winners <- permutations(8, 3, v=ways)
nrow(winners)
medals <- c("Gold", "Silver", "Bronze")
runners <- paste0("Runner",seq(1,3))
ways <- expand.grid(runner = runners, medal = medals)
ways <- paste(ways$runner, ways$medal)
winners <- permutations(3, 3, v=ways)
nrow(winners)
# first we applied a monte carlo simulation
B <- 10000
jam_wins <- replicate(B, {
jam_runners <- c(1,2,3)
winners <- sample(seq(1,8), 3, replace = FALSE)
all(winners %in% jam_runners)
})
mean(jam_wins)
# calculate the probability
pgold <- 3/8 # probability of winning a gold
psilver <- 2/7 # probability of winning a silver
pbronze <- 1/6 # probability of winning a bronze
pgold * psilver * pbronze
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
B <- 10000
set.seed(1)
jam_wins <- replicate(B, {
winners <- sample(runners, 3, replace = FALSE)
all(winners == "Jamaica")
})
mean(jam_wins)
# Different meals = 6
# Different sides = 15
combinations(6,2)
# Different drink = 2
6*15*2
6*15*3
# Different meals = 6
# Different sides = 20
combinations(6,3)
# Different drink = 3
6*20*3
meal_combs <- function(n){
drinks <- 3
sides <- 15
n*drinks*sides
}
sapply(1:12, meal_combs)
meal_combs <- function(n){
drinks <- 3
entrees <- 6
sides <- nrow(combinations(n,2))
drinks*entrees*sides
}
sapply(2:12, meal_combs)
head(esoph)
nrow(esoph)
all_cases <- sum(esoph$ncases)
all_cases
all_controls <- sum(esoph$ncontrols)
all_controls
esoph %>% filter(alcgp == "120+") %>%
summarize(sum_cases=sum(ncases), tot=sum(ncontrols) + sum(ncases), probability=sum_cases/tot)
esoph %>% filter(alcgp == "0-39g/day") %>%
summarize(sum_cases=sum(ncases), tot=sum(ncontrols)+sum(ncases), probability=sum_cases/tot)
esoph %>% filter(alcgp == "0-39g/day") %>%
summarize(sum_cases=sum(ncases), tot=sum(ncontrols)+sum(ncases), probability=sum_cases/tot)
pr_cases <- all_cases / all_controls
esoph %>% summarize(tot_cases = sum(ncases))
esoph %>% filter(tobgp != "0-9g/day") %>%
summarize(smoking10_cases = sum(ncases))
esoph %>% summarize(tot_cases = sum(ncases))
esoph %>% filter(tobgp != "0-9g/day") %>%
summarize(smoking10_cases = sum(ncases))
122/200
esoph %>% summarize(tot_control = sum(ncontrols)) %>% pull(tot_control)
esoph %>% filter(tobgp != "0-9g/day") %>%
summarize(smoking10_controls = sum(ncontrols)) %>% pull(smoking10_controls)
328/775
summary(esoph)
esoph %>% summarize(tot_cases = sum(ncases))
esoph %>% filter(alcgp == "120+") %>%
summarize(smoking10_cases = sum(ncases))
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc = sum(ncases)) %>% pull(highest_alc)
45/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobg == "30+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_alc)
esoph %>% filter(tobg == "30+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
31/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+", alcgp == "120+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
10/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
66/200
esoph %>% summarize(tot_cntrls = sum(ncontrols)) %>% pull(tot_cntrls)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc = sum(ncontrols)) %>% pull(highest_tob)
esoph %>% summarize(tot_cntrls = sum(ncontrols)) %>% pull(tot_cntrls)
esoph %>% filter(alcgp == "120+")
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc = sum(ncontrols)) %>% pull(highest_alc)
22/775
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases))
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases)) %>%
pull(highest_alc_case/highest_alc_cntrol)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases))
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases)) %>%
pull(highest_alc_case/highest_alc_cntrol)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases)) %>%
mutate(ratio = highest_alc_case / highest_alc_cntrol)
pull(ratio)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc_cntrol = sum(ncontrols),
highest_alc_case = sum(ncases)) %>%
mutate(ratio = highest_alc_case / highest_alc_cntrol) %>%
pull(ratio)
esoph %>% filter(alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), case_sum = sum(ncases),
co_prob = contr_sum/all_controls, ca_prob = case_sum/all_cases,
ratio = ca_prob/co_prob)
esoph %>% filter(tobgp == "30+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
esoph %>% filter(tobgp == "30+" & alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
cyan <- 3
magenta <- 5
yellow <- 7
p <- cyan/(cyan+magenta+yellow) # probability of getting a cyan ball
p
1 - p # probability of not getting a cyan ball
beads <- rep(c("red", "blue"), times = c(2,3))    # create an urn with 2 red, 3 blue
beads    # view beads object
sample(beads, 1)    # sample 1 bead at random
B <- 10000    # number of times to draw 1 bead
events <- replicate(B, sample(beads, 1))    # draw 1 bead, B times
tab <- table(events)    # make a table of outcome counts
tab    # view count table
prop.table(tab)    # view table of outcome proportions
mean(events == "red")
n <- 52 # number of cards
pking1 <- 4/52 # probability of drawing a king
n <- 52 - 1 # we do not replace the king card
pking2 <- 3/51 # probability of drawing a second king
pking1 * pking2 # Probabiliy of drawing two kings by row
p <- 5/6 # probability of not seeing a 6
p^6 # probability of not seeing a 6 in 6 rolls
celtics_win_all <- 0.6^4 # probability that celtics win 4 games
1 - celtics_win_all # probability that Cavs win at least 1 game
B <- 10000
celtic_wins <- replicate(B, {
simulated_games <- sample(c("lose","win"), 4, replace = TRUE, prob = c(0.6, 0.4))
any(simulated_games=="win")
})
# Calculate the frequency out of B iterations that the Celtics won at least one game. Print your answer to the console.
mean(celtic_wins)
number <- "Three"
suit <- "Hearts"
paste(number, suit)
expand.grid(pants = c("blue", "black"), shirt = c("white", "grey", "pink"))
# Generating the deck of cards
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
deck <- expand.grid(number = numbers, suit = suits)
deck <- paste(deck$number, deck$suit)
head(deck)
library(gtools)
hands <- permutations(52,2, v = deck)
dim(hands)
summary(hands)
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Number of permutations in which first card is a king
sum(first_card %in% kings & second_card %in% kings) # number of permutation in which first and second cards are a king
sum(first_card %in% kings & second_card %in% kings) / sum(first_card %in% kings) # the probability of getting two kings in a row
hands <- combinations(52, 2, v=deck)
dim(hands)
summary(hands)
aces <- paste("Ace", suits)
facecard <- c("King", "Queen", "Jack", "Ten")
facecard <- expand.grid(number = facecard, suit = suits)
facecard <- paste(facecard$number, facecard$suit)
hands <- combinations(52, 2, v=deck) # all possible hands
# probability of a natural 21 checking for both ace first and ace second
mean((hands[,1] %in% aces & hands[,2] %in% facecard)|(hands[,2] %in% aces & hands[,1] %in% facecard))
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays)) # check for any duplicated birthday
B <- 10000
same_birthday <- function(n){
bdays <- sample(1:365, n, replace=TRUE)
any(duplicated(bdays))
}
results <- replicate(B, same_birthday(50))
mean(results)
compute_prob <- function(n, B=10000){
results <- replicate(B, same_birthday(n)) # compute probs for all sample size
mean(results)
}
n <- seq(1,60)
prob <- sapply(n, compute_prob)
library(tidyverse)
df <- data.frame(prob = prob, n = n)
ggplot(df, aes(x = n, y = prob))+
geom_line()
for (i in 1:50){
p <- (365 - n + 1)/365 # probability of having unique birthdays
}
# in other words
exact_prob <- function(n){
prob_unique <- seq(365,365-n+1)/365 # probability of having unique birthday
1 - prod( prob_unique) # prod is the multiplication of vector
}
eprob <- sapply(n, exact_prob)
df <- data.frame(prob = eprob, n = n)
ggplot(df, aes(x = n, y = prob))+
geom_line()
B <- 10^seq(1, 5, len = 100)    # defines vector of many B values
compute_prob <- function(B, n = 22){    # function to run Monte Carlo simulation with each B
same_day <- replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_day)
}
prob <- sapply(B, compute_prob)    # apply compute_prob to many values of B
df <- data.frame(prob = prob, B = B)
ggplot(df, aes(x = B, y = prob))+
geom_line()+
scale_x_log10()
n <- 6 # remaining games (7 - 1)
outcomes <- c(0,1)  # possible results where 0 indicates a loss and 1 indicates a win for the Cavs
l<-rep(list(outcomes),n) # list of all possible outcomes in all remaining games
possibilities<-expand.grid(l) # data frame containing all the combinations
results <- rowSums(possibilities) >= 4 # which combinations of game outcomes result in the Cavs winning 4 or more games
mean(results) # compute probability
B <- 10000
set.seed(1)
results <- replicate(B, {
x <- sample(c(0,1), 6, replace = TRUE)
sum(x) >= 4
})
mean(results)
p <- seq(0.5, 0.95, 0.025)
prob_win <- function(p){
B <- 10000
results <- replicate(B, {
b_win <- sample(c(1,0), 7, replace = T, prob = c(1-p, p))
sum(b_win) >= 4
})
mean(results)
}
Pr <- sapply(p, prob_win)
plot(p, Pr)
prob_win <- function(N, p=0.75){
B <- 10000
result <- replicate(B, {
b_win <- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p))
sum(b_win)>=(N+1)/2
})
mean(result)
}
N <- seq(1,25,2)
Pr <- sapply(N, prob_win)
plot(N, Pr)
p_ace_and_facecard <- (4/52) * (16/51)
p_facecard_and_ace <- (16/52) * (4/51)
p_one_or_other <- p_ace_and_facecard + p_facecard_and_ace - 0
p_one_or_other
# Monte Carlo simulation of stick strategy
B <- 10000
stick <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)    # open door with no prize that isn't chosen
stick <- my_pick    # stick with original door
stick == prize_door    # test whether the original door has the prize
})
mean(stick)    # probability of choosing prize door when sticking
# Monte Carlo simulation of switch strategy
switch <- replicate(B, {
doors <- as.character(1:3)
prize <- sample(c("car","goat","goat"))    # puts prizes in random order
prize_door <- doors[prize == "car"]    # note which door has prize
my_pick  <- sample(doors, 1)    # note which door is chosen first
show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
switch == prize_door    # test whether the switched door has the prize
})
mean(switch)    # probability of choosing prize door when switching
medals <- c("Gold", "Silver", "Bronze")
runners <- paste0("Runner",seq(1,8))
ways <- expand.grid(runner = runners, medal = medals)
ways <- paste(ways$runner, ways$medal)
winners <- permutations(8, 3, v=ways)
nrow(winners)
medals <- c("Gold", "Silver", "Bronze")
runners <- paste0("Runner",seq(1,3))
ways <- expand.grid(runner = runners, medal = medals)
ways <- paste(ways$runner, ways$medal)
winners <- permutations(3, 3, v=ways)
nrow(winners)
# first we applied a monte carlo simulation
B <- 10000
jam_wins <- replicate(B, {
jam_runners <- c(1,2,3)
winners <- sample(seq(1,8), 3, replace = FALSE)
all(winners %in% jam_runners)
})
mean(jam_wins)
# calculate the probability
pgold <- 3/8 # probability of winning a gold
psilver <- 2/7 # probability of winning a silver
pbronze <- 1/6 # probability of winning a bronze
pgold * psilver * pbronze
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
B <- 10000
set.seed(1)
jam_wins <- replicate(B, {
winners <- sample(runners, 3, replace = FALSE)
all(winners == "Jamaica")
})
mean(jam_wins)
# Different meals = 6
# Different sides = 15
combinations(6,2)
# Different drink = 2
6*15*2
6*15*3
# Different meals = 6
# Different sides = 20
combinations(6,3)
# Different drink = 3
6*20*3
meal_combs <- function(n){
drinks <- 3
sides <- 15
n*drinks*sides
}
sapply(1:12, meal_combs)
meal_combs <- function(n){
drinks <- 3
entrees <- 6
sides <- nrow(combinations(n,2))
drinks*entrees*sides
}
sapply(2:12, meal_combs)
head(esoph)
nrow(esoph)
all_cases <- sum(esoph$ncases)
all_cases
all_controls <- sum(esoph$ncontrols)
all_controls
esoph %>% filter(alcgp == "120+") %>%
summarize(sum_cases=sum(ncases), tot=sum(ncontrols) + sum(ncases), probability=sum_cases/tot)
esoph %>% filter(alcgp == "0-39g/day") %>%
summarize(sum_cases=sum(ncases), tot=sum(ncontrols)+sum(ncases), probability=sum_cases/tot)
esoph %>% summarize(tot_cases = sum(ncases))
esoph %>% filter(tobgp != "0-9g/day") %>%
summarize(smoking10_cases = sum(ncases))
122/200
esoph %>% summarize(tot_control = sum(ncontrols)) %>% pull(tot_control)
esoph %>% filter(tobgp != "0-9g/day") %>%
summarize(smoking10_controls = sum(ncontrols)) %>% pull(smoking10_controls)
328/775
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc = sum(ncases)) %>% pull(highest_alc)
45/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
31/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+", alcgp == "120+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
10/200
esoph %>% summarize(tot_cases = sum(ncases)) %>% pull(tot_cases)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(highest_tob = sum(ncases)) %>% pull(highest_tob)
66/200
esoph %>% summarize(tot_cntrls = sum(ncontrols)) %>% pull(tot_cntrls)
esoph %>% filter(alcgp == "120+") %>%
summarize(highest_alc = sum(ncontrols)) %>% pull(highest_alc)
22/775
esoph %>% filter(alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), case_sum = sum(ncases),
co_prob = contr_sum/all_controls, ca_prob = case_sum/all_cases,
ratio = ca_prob/co_prob)
esoph %>% filter(tobgp == "30+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
esoph %>% filter(tobgp == "30+" & alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), probability = contr_sum/all_controls)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), contr_cases = sum(ncases),
r_contr = contr_sum / all_controls, r_cases = contr_cases / all_cases,
ratio = r_cases / r_contr)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), cases_sum = sum(ncases),
r_contr = contr_sum / all_controls, r_cases = cases_sum / all_cases,
ratio = r_cases / r_contr)
esoph %>% filter(tobgp == "30+" | alcgp == "120+") %>%
summarize(contr_sum = sum(ncontrols), cases_sum = sum(ncases),
r_contr = contr_sum / all_controls, r_cases = cases_sum / all_cases,
ratio = r_cases / r_contr)
esoph %>% filter(alcgp == "120+" | tobgp == "30+") %>%
summarize(contr_sum = sum(ncontrols), case_sum = sum(ncases),
co_prob = contr_sum/all_controls, ca_prob = case_sum/all_cases,
ratio = ca_prob/co_prob)
