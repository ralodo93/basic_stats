beads <- rep(c("red", "blue"), times = c(2,3))    # create an urn with 2 red, 3 blue
beads    # view beads object
sample(beads, 1)    # sample 1 bead at random
B <- 10000    # number of times to draw 1 bead
events <- replicate(B, sample(beads, 1))    # draw 1 bead, B times
tab <- table(events)    # make a table of outcome counts
tab    # view count table
prop.table(tab)    # view table of outcome proportions
mean(events)
mean(events == "red")
n <- 52 # number of cards
pking1 <- 4/52 # probability of drawing a king
n <- 52 - 1 # we do not replace the king card
pking2 <- 3/51 # probability of drawing a second king
pking1 * pking2 # Probabiliy of drawing two kings by row
# Generating the deck of cards
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
deck <- expand.grid(number = numbers, suit = suits)
deck <- paste(deck$number, deck$suit)
head(deck)
library(gtools)
hands <- permutations(52,2, v = deck)
dim(hands)
summary(hands)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Probs that first card is a king
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Probs that first card is a king
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Number of permutations in which first card is a king
mean(first_card %in% kings) # Probabilty of drawing a king in the first card
4/52
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Number of permutations in which first card is a king
mean(first_card %in% kings) # Probabilty of drawing a king in the first card
mean(first_card %in% kings & second_card %in% kings)
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Number of permutations in which first card is a king
mean(first_card %in% kings) # Probabilty of drawing a king in the first card
mean(first_card %in% kings & second_card %in% kings)
sum(first_card %in% kings & second_card %in% kings) / sum(first_card %in% kings)
kings <- paste("King", suits)
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings) # Number of permutations in which first card is a king
mean(first_card %in% kings) # Probabilty of drawing a king in the first card
mean(first_card %in% kings)* mean(second_card %in% kings)
sum(first_card %in% kings & second_card %in% kings) / sum(first_card %in% kings)
hands <- combinations(52, 2, v=deck)
dim(hands)
summary(hands)
aces <- paste("Ace", suits)
facecard <- c("King", "Queen", "Jack", "Ten")
facecard <- expand.grid(number = facecard, suit = suits)
facecard <- paste(facecard$number, facecard$suit)
hands <- combinations(52, 2, v=deck) # all possible hands
# probability of a natural 21 checking for both ace first and ace second
mean((hands[,1] %in% aces & hands[,2] %in% facecard)|(hands[,2] %in% aces & hands[,1] %in% facecard))
# checking for duplicated bdays in one 50 person group
n <- 50
bdays <- sample(1:365, n, replace = TRUE)    # generate n random birthdays
any(duplicated(bdays))    # check if any birthdays are duplicated
# Monte Carlo simulation with B=10000 replicates
B <- 10000
results <- replicate(B, {    # returns vector of B logical values
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(results)    # calculates proportion of groups with duplicated bdays
exact_prob <- function(n){
prob_unique <- seq(365, 365-n+1)/365   # vector of fractions for mult. rule
1 - prod(prob_unique)    # calculate prob of no shared birthdays and subtract from 1
}
# applying function element-wise to vector of n values
eprob <- sapply(n, exact_prob)
exact_prob <- function(n){
prob_unique <- seq(365, 365-n+1)/365   # vector of fractions for mult. rule
1 - prod(prob_unique)    # calculate prob of no shared birthdays and subtract from 1
}
# applying function element-wise to vector of n values
eprob <- sapply(n, exact_prob)
eprob
n = 1
prob_unique <- seq(365, 365-n+1)/365   # vector of fractions for mult. rule
n = 2
prob_unique <- seq(365, 365-n+1)/365   # vector of fractions for mult. rule
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays)) # check for any duplicated birthday
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays)) # check for any duplicated birthday
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays)) # check for any duplicated birthday
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays)) # check for any duplicated birthday
B <- 10000
same_birthday <- function(n){
bdays <- sample(1:365, n, replace=TRUE)
any(duplicated(bdays))
}
results <- replicate(B, same_birthday(50))
mean(results)
compute_prob <- function(n, B=10000){
results <- replicate(B, same_birthday(n))
mean(results)
}
n <- seq(1,60)
prob <- sapply(n, compute_prob)
library(tidyverse)
df <- data.frame(prob = prob, n = n)
ggplot(df, aes(x = n, prob = prob))+
geom_line()
View(df)
compute_prob <- function(n, B=10000){
results <- replicate(B, same_birthday(n)) # compute probs for all sample size
mean(results)
}
n <- seq(1,60)
prob <- sapply(n, compute_prob)
library(tidyverse)
df <- data.frame(prob = prob, n = n)
ggplot(df, aes(x = n, y = prob))+
geom_line()
?prod
for (i in 1:50){
p <- (365 - n + 1)/365 # probability of having unique birthdays
}
# in other words
exact_prob <- function(n){
prob_unique <- seq(365,365-n+1)/365 # probability of having unique birthday
1 - prod( prob_unique) # prod is the multiplication of vector
}
eprob <- sapply(n, exact_prob)
for (i in 1:50){
p <- (365 - n + 1)/365 # probability of having unique birthdays
}
# in other words
exact_prob <- function(n){
prob_unique <- seq(365,365-n+1)/365 # probability of having unique birthday
1 - prod( prob_unique) # prod is the multiplication of vector
}
eprob <- sapply(n, exact_prob)
df <- data.frame(prob = eprob, n = n)
ggplot(df, aes(x = n, y = prob))+
geom_line()
